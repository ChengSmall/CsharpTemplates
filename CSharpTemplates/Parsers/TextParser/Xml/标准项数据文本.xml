<?xml version="1.0" encoding="UTF-8"?>
<标准项数据文本>

    <!-- 不一样的惩 -->
    <!-- 
        标准项数据文本，私人定制的简易文本输出标准，为xml语法标准的衍生标准，该标准可将处理超文本，文本样式，数值格式化运算等操作
        该标准拥有可扩展，兼容性强的特点
        一行标准项文本，表示为xml语法的某一节点下符合语法的所有文本数据
        一行标准项文本，在做解析时，无论是否符合标准，都将输出文本。

        语法有三种状态，符合基础标准，不符合基础标准但处于标准内，不符合基本标准

        状态1：符合基础标准
        此状态表示语法完全遵从基本标准定义，没有任何额外的格式，将正常输出文本

        状态2：不符合基础标准但处于标准内
        此状态表示除了拥有标准定义的语法外，还拥有其它未被基础定义的，实现者也没有实现的其它格式，此时输出的文本在基本标准内做正常输出，非基本标准的部分不做标准定义，由实现者决定；但输出的结果需要包含符合标准定义的文本，且前后顺序正确

        状态3：不符合基本标准
        此状态下，输出的文本没有标准定义，但是必须可以输出文本

        如果符合基本标准但因各种硬件或其它条件受限，则需要做向下兼容输出，例如无法进行math运算，无法修改文本颜色，则直接输出原始文本
    -->

    <!-- 对文本标准定义
        符合基础标准：仅包含纯文本，<color/> 颜色标签，<STDText/> 原始数据标签，<math/> 数学运算标签和<![CDATA[这里的文本]]>

        不符合基础标准但处于标准内：基础标准语法正确，且存在其它<item/><key/>项名的元素定义

        不符合基本标准：存在基本定义标签但标签格式或属性不正确 <color value="ABCDEFG"></color>，<math col="text">M249</math>
     -->
    
    <test>一行文本标准项文本</test>
    <xml>每一项文本项标准格式都是xml标准元素格式</xml>
    <childs>每一行文本项标准格式的文本，都在某一块元素的子节点内</childs>
    <!-- 输出的文本将忽略注释内容 -->
    
    <Color>
        使用带颜色的文本:
        <color value="00FF00">这里是绿色</color>
        <color value="FF0000">这里是红色</color>
        <color value="0000FF">这里是蓝色</color>
        color项名，属性value的值则是颜色文本，参数不可忽略
        color内可写任何文本项标准格式，但若项内发生多层相同格式嵌套则不属于标准定义规则
        但不论是否符合标准，皆必须正常输出文本
    </Color>

    <STD>
        原始编码标准化文本格式，使用STDText项，可写入原始二进制信息，其格式为"XX XX XX"
        属性encoding指定用哪种解码方式，值不可忽略，值为Internet编号分配管理机构(IANA)注册的编码名称
        如果解析器无法有效使用encoding属性指定的编码格式（前提是正确的字符编码名），则直接将文本输出为原始文本
        内部无法嵌套其它标准文本，必须是纯文本
        <STDText encoding="utf-8">E4 B8 80 E6 AE B5 E6 B5 8B E8 AF 95 E6 96 87 E6 9C AC</STDText>
    </STD>

    <Math>
        <!-- 数学转化功能，使用math项将可表示数字的文本，转化为不同格式 -->

        <!-- 将小数转化为百分比，这里将文本 "0.3 "转化为 "30%" -->
        <math type="percent">0.3</math>
        <!-- 将小数四舍五入为整数，这里将1.5舍入为2 -->
        <math type="round">1.5</math>
        <!-- 将小数的小数点省去，这里将1.8省为1 -->
        <math type="cutPoint">1.8</math>
        <!-- 将值保留到指定位的小数，用value指定位数，这里将2转化为2.00 -->
        <math type="keepDecs" value="2">2</math>
        <!-- 这里将3.14159舍入为3.142 -->
        <math type="keepDecs" value="3">3.14159</math>
        <!-- 进行数据运算，使用文本内表达式运算 -->
        <!-- 加法运算，运算符中间可插入空格 -->
        <math type="cal">1 + 2</math>
        <!-- 减法运算，运算符和值也可以紧凑相连 -->
        <math type="cal">4-3</math>
        <!-- 乘法运算，左右两边或是中间出现空格皆为标准内语法 -->
        <math type="cal">  2.1  * 3 </math>
        <!-- 除法运算，运算结果可出现小数，这个式子结果为2.4 -->
        <math type="cal">1.2 / 0.5</math>
        <!-- 取余数运算，这个式子的结果为1 -->
        <math type="cal">7 % 3</math>

        <!-- math节点内若出现数值，运算符，空格三者之外的文本则为非标准语法 -->
        <!-- math节点内的文本可为纯文本，也可为标准项文本，可嵌套；解析顺序为优先解析内部文本，再按内部输出的文本进行解析运算 -->
    </Math>

    <AnyText>
        在编写文本时遇到xml本身无法使用的纯文本字符，可以使用<![CDATA[这里的文本]]>衔接文本的内容
    </AnyText>

    <DIY>
        该标准可高度扩展，一行标准文本内，如果不是标准定义，由解析器自行定义解析模式；
        但无论格式何如，只要是xml标准语法，皆必须可输出为一串文本；
        该标准可做减法：譬如没有提供颜色文本输出，即可忽略color项的颜色定义，但仍然需要正确输出内部文本
    </DIY>

</标准项数据文本>